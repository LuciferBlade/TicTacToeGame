/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tictactoegame;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JButton;

/**
 *
 * @author blade
 */
public class GUI extends javax.swing.JFrame {

    ArrayList<JButton> listy; //Board button Array
    int playerTurn = 0;
    TicTacToe TTT;
    ComputerPlayer cPlayer;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        //xSign.setEnabled(false);
        //oSign.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerSelectionGroup = new javax.swing.ButtonGroup();
        playerSignSelection = new javax.swing.ButtonGroup();
        playButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        radio1Player = new javax.swing.JRadioButton();
        radio2Player = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        boardSizeField = new javax.swing.JTextField();
        InfoText = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        oSign = new javax.swing.JRadioButton();
        xSign = new javax.swing.JRadioButton();

        playerSelectionGroup.add(radio1Player);
        playerSelectionGroup.add(radio2Player);

        playerSignSelection.add(oSign);
        playerSignSelection.add(xSign);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Noto Sans", 1, 16)); // NOI18N
        jLabel1.setText("TicTacToe game");

        radio1Player.setSelected(true);
        radio1Player.setText("1Player");
        radio1Player.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio1PlayerActionPerformed(evt);
            }
        });

        radio2Player.setText("2 Player");
        radio2Player.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio2PlayerActionPerformed(evt);
            }
        });

        jLabel2.setText("Player selection:");

        jLabel3.setText("Board size:");

        boardSizeField.setText("3");
        boardSizeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                boardSizeFieldKeyTyped(evt);
            }
        });

        InfoText.setForeground(new java.awt.Color(255, 0, 0));

        jLabel4.setText("Player sign");

        oSign.setText("O");

        xSign.setSelected(true);
        xSign.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radio1Player)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radio2Player)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(InfoText, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(xSign)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(oSign)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(boardSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playButton)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InfoText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio1Player)
                    .addComponent(radio2Player)
                    .addComponent(boardSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playButton)
                    .addComponent(xSign)
                    .addComponent(oSign))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        int i = Integer.parseInt(boardSizeField.getText()); // get wanted board size

        // Play button became new game button
        if (playButton.getText().equals("New")) {
            setInterface(true);
            for (int k = 0; k < i * i; k++) {
                listy.get(k).setEnabled(false);
            }
            listy.clear();

            // check if board is > 2 tiles because otherwise game makes no sence
            // added limit to 15x15 board because after that games starts to make no sence even if you play while
            // putting signs randomly
        } else if (Integer.parseInt(boardSizeField.getText()) < 3 || Integer.parseInt(boardSizeField.getText()) > 15) {
            InfoText.setText("Invalid board size!!!");

        } else {
            setInterface(false); // disable Interface from illict actions
            resetBoard(i); // reset board and player

            //create a computer player
            if (radio1Player.isSelected()) {
                cPlayer = new ComputerPlayer(TTT);
            }

            buttonPanel.setLayout(new GridLayout(i, i)); //create button grid
            listy = new ArrayList<>(); // create arrayList to store buttons just in case it wasnt created

            //creating a dynamic amount of buttons based on player selection
            for (int j = 0; j < i * i; j++) {
                int temp = j;
                listy.add(new JButton(" ")); //add button to list
                listy.get(j).setFont(new Font("Ariel", Font.PLAIN, 30));
                //add action event to change value of button and create change in board
                listy.get(j).addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        JButton button = listy.get(temp); //refference to button from inner class
                        if (button.getText().equals(" ")) { //check if button actually is empty
                            TTT.setTile(playerTurn + 1, temp / i, temp % i); // change button and board values
                            switch (playerTurn) { //Symbol is player dependent
                                case 0:
                                    button.setText("X");
                                    break;
                                case 1:
                                    button.setText("O");
                                    break;
                                default:
                                    System.out.print("error");
                                    break;
                            }

                            //self explanatory
                            checkWin();
                            setPlayerTurn();

                            //remove all possible actions with this button
                            button.removeActionListener(this);

                            //if 1 player mode is selected and game is not won 
                            if (radio1Player.isSelected() && TTT.check(1).equals("Not won") && TTT.check(2).equals("Not won")) {
                                autoTurn(); //initiate PC turn
                            }
                        }
                    }
                });

                //finaly adding button with it's listener to the panel
                buttonPanel.add(listy.get(j));
            }

            //updating UI for button grid
            buttonPanel.updateUI();

            //if player chose to start 2nd by choosing O
            if (oSign.isSelected()) {
                autoTurn(); // initiate PC turn
            }
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void boardSizeFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boardSizeFieldKeyTyped
        //Forcing person to enter only numbers in size field
        if (!((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9'))) {
            evt.setKeyChar(Character.MIN_VALUE);
        }
    }//GEN-LAST:event_boardSizeFieldKeyTyped

    private void radio1PlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio1PlayerActionPerformed
        xSign.setEnabled(true);
        oSign.setEnabled(true);
    }//GEN-LAST:event_radio1PlayerActionPerformed

    private void radio2PlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio2PlayerActionPerformed
        xSign.setEnabled(false);
        oSign.setEnabled(false);
    }//GEN-LAST:event_radio2PlayerActionPerformed

    private void resetBoard(int size) {
        TTT = new TicTacToe(size); //reset game class
        if (listy != null) { //reset button list
            listy.clear();
            buttonPanel.removeAll();
        }
        InfoText.setText(""); //reset info field
        playerTurn = 0; //reset turn
    }

    private void autoTurn() { //computer turn
        String move;
        if (xSign.isSelected()) { //if player chose to be first
            move = cPlayer.autoPlayAdvanced(2);//autoPlay(2);// make PC turn
            String[] splitStr = move.split("\\s+");

            //get button which is changed on the board
            JButton button = listy.get(Integer.parseInt(splitStr[0]) * Integer.parseInt(boardSizeField.getText()) + Integer.parseInt(splitStr[1]));
            button.setText("O"); //set button to PC sign

            //remove listener from the button
            for (ActionListener aListener : button.getActionListeners()) {
                button.removeActionListener(aListener);
            }

            checkWin(); //check if PC won

            //player goes second
        } else { //if player chose to be second
            move = cPlayer.autoPlayAdvanced(1);//autoPlay(1);// make PC turn
            String[] splitStr = move.split("\\s+");

            //get button which is changed on the board
            JButton button = listy.get(Integer.parseInt(splitStr[0]) * Integer.parseInt(boardSizeField.getText()) + Integer.parseInt(splitStr[1]));
            button.setText("X"); //set button to PC sign

            //remove listener from the button
            for (ActionListener aListener : button.getActionListeners()) {
                button.removeActionListener(aListener);
            }

            checkWin(); //check if PC won
        }
        setPlayerTurn(); //change to player turn
    }

    private void setInterface(boolean status) { //set interface during and after game
        if (playButton.getText().equals("Play")) {
            playButton.setText("New");
        } else {
            playButton.setText("Play");
        }
        //playButton.setEnabled(status);
        boardSizeField.setEnabled(status);
        if (radio1Player.isSelected()) {
            xSign.setEnabled(status);
            oSign.setEnabled(status);
        }
        radio1Player.setEnabled(status);
        radio2Player.setEnabled(status);
    }

    private void checkWin() { //check on TicTacToe class if game is won
        int length = Integer.parseInt(boardSizeField.getText());
        // X or player 1 won
        if (!TTT.check(1).equals("Not won") && !TTT.check(1).equals("Tie")) {
            InfoText.setText("player 1 won!");
            colorWinPatern(length, TTT.check(1));
            setInterface(true);

            // O or player 2 won
        } else if (!TTT.check(2).equals("Not won") && !TTT.check(2).equals("Tie")) {
            InfoText.setText("player 2 won!");
            colorWinPatern(length, TTT.check(2));
            setInterface(true);

            //Game reached a tie
        } else if (TTT.check(1).equals("Tie") || TTT.check(2).equals("Tie")) {
            InfoText.setText("Players have reached a tie!");
            setInterface(true);
        }
    }

    private void colorWinPatern(int length, String winStart) { //color button green when game is won
        //win pattern is divided into array
        String[] splitStr = winStart.split("\\s+");

        int a, b; //setting up pattern start values
        a = Integer.parseInt(splitStr[1]);
        b = Integer.parseInt(splitStr[2]);
        char[] temp = splitStr[0].toCharArray();

        //depending on pattern in splitStr[0] coloring buttons
        switch (temp[0]) {
            case '/': //reverse diagonal
                for (int i = 0; i < length; i++) {
                    JButton button = listy.get((i + 1) * length - (i + 1));
                    button.setBackground(Color.green);
                }
                break;
            case '\\': //diagonal
                for (int i = 0; i < length; i++) {
                    JButton button = listy.get(i + i * length);
                    button.setBackground(Color.green);
                }
                break;
            case '-': // horizontal
                for (int i = 0; i < length; i++) {
                    JButton button = listy.get(i + a * length);
                    button.setBackground(Color.green);
                }
                break;
            case '|': // vertical
                for (int i = 0; i < length; i++) {
                    JButton button = listy.get(b + i * length);
                    button.setBackground(Color.green);
                }
                break;
            default: // wrong pattern check (just in case)
                System.out.println("error!!!");
                break;
        }

        //disable all buttons that aren't in win pattern
        for (int i = 0; i < listy.size(); i++) {
            if (listy.get(i).getBackground() != Color.green) {
                listy.get(i).setEnabled(false);
            }
        }
    }

    private void setPlayerTurn() { //changing player turn (1 -> 2 or 2 -> 1)
        playerTurn++;
        if (playerTurn == 2) {
            playerTurn = 0;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel InfoText;
    private javax.swing.JTextField boardSizeField;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton oSign;
    private javax.swing.JButton playButton;
    private javax.swing.ButtonGroup playerSelectionGroup;
    private javax.swing.ButtonGroup playerSignSelection;
    private javax.swing.JRadioButton radio1Player;
    private javax.swing.JRadioButton radio2Player;
    private javax.swing.JRadioButton xSign;
    // End of variables declaration//GEN-END:variables
}
